// Code generated by MockGen. DO NOT EDIT.
// Source: security/identity/principal.go
//
// Generated by this command:
//
//	mockgen -source=security/identity/principal.go -destination=securitymock/identitymock/principal.go -package=identitymock
//

// Package identitymock is a generated GoMock package.
package identitymock

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockPrincipal is a mock of Principal interface.
type MockPrincipal struct {
	ctrl     *gomock.Controller
	recorder *MockPrincipalMockRecorder
	isgomock struct{}
}

// MockPrincipalMockRecorder is the mock recorder for MockPrincipal.
type MockPrincipalMockRecorder struct {
	mock *MockPrincipal
}

// NewMockPrincipal creates a new mock instance.
func NewMockPrincipal(ctrl *gomock.Controller) *MockPrincipal {
	mock := &MockPrincipal{ctrl: ctrl}
	mock.recorder = &MockPrincipalMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPrincipal) EXPECT() *MockPrincipalMockRecorder {
	return m.recorder
}

// Authorities mocks base method.
func (m *MockPrincipal) Authorities() []string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Authorities")
	ret0, _ := ret[0].([]string)
	return ret0
}

// Authorities indicates an expected call of Authorities.
func (mr *MockPrincipalMockRecorder) Authorities() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Authorities", reflect.TypeOf((*MockPrincipal)(nil).Authorities))
}

// HasAllAuthorities mocks base method.
func (m *MockPrincipal) HasAllAuthorities(authorities ...string) bool {
	m.ctrl.T.Helper()
	varargs := []any{}
	for _, a := range authorities {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "HasAllAuthorities", varargs...)
	ret0, _ := ret[0].(bool)
	return ret0
}

// HasAllAuthorities indicates an expected call of HasAllAuthorities.
func (mr *MockPrincipalMockRecorder) HasAllAuthorities(authorities ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HasAllAuthorities", reflect.TypeOf((*MockPrincipal)(nil).HasAllAuthorities), authorities...)
}

// HasAnyAuthorities mocks base method.
func (m *MockPrincipal) HasAnyAuthorities(authorities ...string) bool {
	m.ctrl.T.Helper()
	varargs := []any{}
	for _, a := range authorities {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "HasAnyAuthorities", varargs...)
	ret0, _ := ret[0].(bool)
	return ret0
}

// HasAnyAuthorities indicates an expected call of HasAnyAuthorities.
func (mr *MockPrincipalMockRecorder) HasAnyAuthorities(authorities ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HasAnyAuthorities", reflect.TypeOf((*MockPrincipal)(nil).HasAnyAuthorities), authorities...)
}

// HasAuthority mocks base method.
func (m *MockPrincipal) HasAuthority(authority string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HasAuthority", authority)
	ret0, _ := ret[0].(bool)
	return ret0
}

// HasAuthority indicates an expected call of HasAuthority.
func (mr *MockPrincipalMockRecorder) HasAuthority(authority any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HasAuthority", reflect.TypeOf((*MockPrincipal)(nil).HasAuthority), authority)
}

// ID mocks base method.
func (m *MockPrincipal) ID() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ID")
	ret0, _ := ret[0].(string)
	return ret0
}

// ID indicates an expected call of ID.
func (mr *MockPrincipalMockRecorder) ID() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ID", reflect.TypeOf((*MockPrincipal)(nil).ID))
}
