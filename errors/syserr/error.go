package syserr

import (
	"errors"
	"fmt"
)

// An Error refers to an issue or malfunction that occurs within the operating system or other system-level
// software, which impacts the proper execution of a program. These errors typically arise from
// interactions between the application and the underlying hardware or operating system resources.
//
// If [New] is called to create the [Error], use [Option] routines (e.g. [WithInternalCode], [WithStaticError])
// to set optional values.
//
// This structure implements stdlib error, [errors.Unwrap] and [fmt.Stringer] interfaces.
type Error struct {
	// Type the type of the [Error].
	Type Type
	// InternalCode is a code generated by the system to identify errors.
	//
	// This helps external systems, calling the local system, to differentiate errors with the same [Type].
	InternalCode string
	// Message a clear explanation about the occurrence (i.e. an [Error]).
	Message string
	// StaticError is the static error [Error] is attached to.
	//
	// Consider [Error] as a dynamic error as the latter holds values that can be modified at any time without
	// needing to re-allocate another [Error] instance.
	//
	// This field may also work as parent error.
	StaticError error
	// Metadata is a collection of information additional to the properties defined in [Error].
	// These properties are dynamic and external systems should not depend on its formatting nor values.
	Metadata map[string]string
}

var (
	// compile-type assertions
	_ error        = (*Error)(nil)
	_ fmt.Stringer = (*Error)(nil)
)

// New allocates a new [Error] instance.
func New(errType Type, message string, opts ...Option) Error {
	err := Error{
		Type:     errType,
		Message:  message,
		Metadata: make(map[string]string),
	}
	for _, opt := range opts {
		opt(&err)
	}
	return err
}

func (e Error) Error() string {
	return e.Message
}

func (e Error) String() string {
	return e.Message
}

// Unwrap unwraps an underlying static error based on [Error.StaticError].
//
// If given field is nil, a new static error will be generated using [errors.New] and the [Error.Message].
func (e Error) Unwrap() error {
	if e.StaticError != nil {
		return e.StaticError
	}
	return errors.New(e.Message)
}

// -- OPTIONS --

// Option is an option routine exposed to clients to set optional values of [Error].
type Option func(*Error)

// WithInternalCode sets the [Error] internal code.
func WithInternalCode(code string) Option {
	return func(e *Error) {
		e.InternalCode = code
	}
}

// WithStaticError sets the [Error] static error.
//
// Static errors may help for error checking operations using [errors.Is].
//
// Moreover, a static error might be a parent error.
func WithStaticError(err error) Option {
	return func(e *Error) {
		e.StaticError = err
	}
}

// WithInfo appends `key` and `value` into the [Error.Metadata] collection.
//
// If `key` is empty, no entry will be set.
func WithInfo(key, value string) Option {
	return func(e *Error) {
		if key == "" {
			return
		}
		if e.Metadata == nil {
			e.Metadata = make(map[string]string, 1)
		}
		e.Metadata[key] = value
	}
}
