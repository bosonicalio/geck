// Code generated by MockGen. DO NOT EDIT.
// Source: persistence/storable.go
//
// Generated by this command:
//
//	mockgen -source=persistence/storable.go -destination=persistencemock/storable.go -package=persistencemock
//

// Package persistencemock is a generated GoMock package.
package persistencemock

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockStorable is a mock of Storable interface.
type MockStorable struct {
	ctrl     *gomock.Controller
	recorder *MockStorableMockRecorder
	isgomock struct{}
}

// MockStorableMockRecorder is the mock recorder for MockStorable.
type MockStorableMockRecorder struct {
	mock *MockStorable
}

// NewMockStorable creates a new mock instance.
func NewMockStorable(ctrl *gomock.Controller) *MockStorable {
	mock := &MockStorable{ctrl: ctrl}
	mock.recorder = &MockStorableMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStorable) EXPECT() *MockStorableMockRecorder {
	return m.recorder
}

// IsNew mocks base method.
func (m *MockStorable) IsNew() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsNew")
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsNew indicates an expected call of IsNew.
func (mr *MockStorableMockRecorder) IsNew() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsNew", reflect.TypeOf((*MockStorable)(nil).IsNew))
}
