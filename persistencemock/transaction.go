// Code generated by MockGen. DO NOT EDIT.
// Source: persistence/transaction.go
//
// Generated by this command:
//
//	mockgen -source=persistence/transaction.go -destination=persistencemock/transaction.go -package=persistencemock
//

// Package persistencemock is a generated GoMock package.
package persistencemock

import (
	context "context"
	reflect "reflect"

	persistence "github.com/tesserical/geck/persistence"
	gomock "go.uber.org/mock/gomock"
)

// MockTransaction is a mock of Transaction interface.
type MockTransaction struct {
	ctrl     *gomock.Controller
	recorder *MockTransactionMockRecorder
	isgomock struct{}
}

// MockTransactionMockRecorder is the mock recorder for MockTransaction.
type MockTransactionMockRecorder struct {
	mock *MockTransaction
}

// NewMockTransaction creates a new mock instance.
func NewMockTransaction(ctrl *gomock.Controller) *MockTransaction {
	mock := &MockTransaction{ctrl: ctrl}
	mock.recorder = &MockTransactionMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTransaction) EXPECT() *MockTransactionMockRecorder {
	return m.recorder
}

// Commit mocks base method.
func (m *MockTransaction) Commit(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Commit", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// Commit indicates an expected call of Commit.
func (mr *MockTransactionMockRecorder) Commit(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Commit", reflect.TypeOf((*MockTransaction)(nil).Commit), ctx)
}

// Rollback mocks base method.
func (m *MockTransaction) Rollback(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Rollback", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// Rollback indicates an expected call of Rollback.
func (mr *MockTransactionMockRecorder) Rollback(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Rollback", reflect.TypeOf((*MockTransaction)(nil).Rollback), ctx)
}

// MockTxFactory is a mock of TxFactory interface.
type MockTxFactory struct {
	ctrl     *gomock.Controller
	recorder *MockTxFactoryMockRecorder
	isgomock struct{}
}

// MockTxFactoryMockRecorder is the mock recorder for MockTxFactory.
type MockTxFactoryMockRecorder struct {
	mock *MockTxFactory
}

// NewMockTxFactory creates a new mock instance.
func NewMockTxFactory(ctrl *gomock.Controller) *MockTxFactory {
	mock := &MockTxFactory{ctrl: ctrl}
	mock.recorder = &MockTxFactoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTxFactory) EXPECT() *MockTxFactoryMockRecorder {
	return m.recorder
}

// Driver mocks base method.
func (m *MockTxFactory) Driver() persistence.TxDriver {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Driver")
	ret0, _ := ret[0].(persistence.TxDriver)
	return ret0
}

// Driver indicates an expected call of Driver.
func (mr *MockTxFactoryMockRecorder) Driver() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Driver", reflect.TypeOf((*MockTxFactory)(nil).Driver))
}

// NewTx mocks base method.
func (m *MockTxFactory) NewTx(ctx context.Context) (persistence.Transaction, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewTx", ctx)
	ret0, _ := ret[0].(persistence.Transaction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NewTx indicates an expected call of NewTx.
func (mr *MockTxFactoryMockRecorder) NewTx(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewTx", reflect.TypeOf((*MockTxFactory)(nil).NewTx), ctx)
}
