// Code generated by MockGen. DO NOT EDIT.
// Source: persistence/repository.go
//
// Generated by this command:
//
//	mockgen -source=persistence/repository.go -destination=persistencemock/repository.go -package=persistencemock
//

// Package persistencemock is a generated GoMock package.
package persistencemock

import (
	context "context"
	reflect "reflect"

	persistence "github.com/tesserical/geck/persistence"
	gomock "go.uber.org/mock/gomock"
)

// MockReadRepository is a mock of ReadRepository interface.
type MockReadRepository[K comparable, T any] struct {
	ctrl     *gomock.Controller
	recorder *MockReadRepositoryMockRecorder[K, T]
	isgomock struct{}
}

// MockReadRepositoryMockRecorder is the mock recorder for MockReadRepository.
type MockReadRepositoryMockRecorder[K comparable, T any] struct {
	mock *MockReadRepository[K, T]
}

// NewMockReadRepository creates a new mock instance.
func NewMockReadRepository[K comparable, T any](ctrl *gomock.Controller) *MockReadRepository[K, T] {
	mock := &MockReadRepository[K, T]{ctrl: ctrl}
	mock.recorder = &MockReadRepositoryMockRecorder[K, T]{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockReadRepository[K, T]) EXPECT() *MockReadRepositoryMockRecorder[K, T] {
	return m.recorder
}

// FindByKey mocks base method.
func (m *MockReadRepository[K, T]) FindByKey(ctx context.Context, key K) (*T, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByKey", ctx, key)
	ret0, _ := ret[0].(*T)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByKey indicates an expected call of FindByKey.
func (mr *MockReadRepositoryMockRecorder[K, T]) FindByKey(ctx, key any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByKey", reflect.TypeOf((*MockReadRepository[K, T])(nil).FindByKey), ctx, key)
}

// MockWriteRepository is a mock of WriteRepository interface.
type MockWriteRepository[K comparable, T persistence.Storable] struct {
	ctrl     *gomock.Controller
	recorder *MockWriteRepositoryMockRecorder[K, T]
	isgomock struct{}
}

// MockWriteRepositoryMockRecorder is the mock recorder for MockWriteRepository.
type MockWriteRepositoryMockRecorder[K comparable, T persistence.Storable] struct {
	mock *MockWriteRepository[K, T]
}

// NewMockWriteRepository creates a new mock instance.
func NewMockWriteRepository[K comparable, T persistence.Storable](ctrl *gomock.Controller) *MockWriteRepository[K, T] {
	mock := &MockWriteRepository[K, T]{ctrl: ctrl}
	mock.recorder = &MockWriteRepositoryMockRecorder[K, T]{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockWriteRepository[K, T]) EXPECT() *MockWriteRepositoryMockRecorder[K, T] {
	return m.recorder
}

// Delete mocks base method.
func (m *MockWriteRepository[K, T]) Delete(ctx context.Context, entity T) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, entity)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockWriteRepositoryMockRecorder[K, T]) Delete(ctx, entity any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockWriteRepository[K, T])(nil).Delete), ctx, entity)
}

// DeleteByKey mocks base method.
func (m *MockWriteRepository[K, T]) DeleteByKey(ctx context.Context, key K) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteByKey", ctx, key)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteByKey indicates an expected call of DeleteByKey.
func (mr *MockWriteRepositoryMockRecorder[K, T]) DeleteByKey(ctx, key any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteByKey", reflect.TypeOf((*MockWriteRepository[K, T])(nil).DeleteByKey), ctx, key)
}

// Save mocks base method.
func (m *MockWriteRepository[K, T]) Save(ctx context.Context, entity T) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Save", ctx, entity)
	ret0, _ := ret[0].(error)
	return ret0
}

// Save indicates an expected call of Save.
func (mr *MockWriteRepositoryMockRecorder[K, T]) Save(ctx, entity any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockWriteRepository[K, T])(nil).Save), ctx, entity)
}

// MockWriteBatchRepository is a mock of WriteBatchRepository interface.
type MockWriteBatchRepository[K comparable, T persistence.Storable] struct {
	ctrl     *gomock.Controller
	recorder *MockWriteBatchRepositoryMockRecorder[K, T]
	isgomock struct{}
}

// MockWriteBatchRepositoryMockRecorder is the mock recorder for MockWriteBatchRepository.
type MockWriteBatchRepositoryMockRecorder[K comparable, T persistence.Storable] struct {
	mock *MockWriteBatchRepository[K, T]
}

// NewMockWriteBatchRepository creates a new mock instance.
func NewMockWriteBatchRepository[K comparable, T persistence.Storable](ctrl *gomock.Controller) *MockWriteBatchRepository[K, T] {
	mock := &MockWriteBatchRepository[K, T]{ctrl: ctrl}
	mock.recorder = &MockWriteBatchRepositoryMockRecorder[K, T]{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockWriteBatchRepository[K, T]) EXPECT() *MockWriteBatchRepositoryMockRecorder[K, T] {
	return m.recorder
}

// DeleteAll mocks base method.
func (m *MockWriteBatchRepository[K, T]) DeleteAll(ctx context.Context, entities []T) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAll", ctx, entities)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAll indicates an expected call of DeleteAll.
func (mr *MockWriteBatchRepositoryMockRecorder[K, T]) DeleteAll(ctx, entities any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAll", reflect.TypeOf((*MockWriteBatchRepository[K, T])(nil).DeleteAll), ctx, entities)
}

// DeleteAllByKeys mocks base method.
func (m *MockWriteBatchRepository[K, T]) DeleteAllByKeys(ctx context.Context, keys []K) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAllByKeys", ctx, keys)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAllByKeys indicates an expected call of DeleteAllByKeys.
func (mr *MockWriteBatchRepositoryMockRecorder[K, T]) DeleteAllByKeys(ctx, keys any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAllByKeys", reflect.TypeOf((*MockWriteBatchRepository[K, T])(nil).DeleteAllByKeys), ctx, keys)
}

// SaveAll mocks base method.
func (m *MockWriteBatchRepository[K, T]) SaveAll(ctx context.Context, entities []T) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveAll", ctx, entities)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveAll indicates an expected call of SaveAll.
func (mr *MockWriteBatchRepositoryMockRecorder[K, T]) SaveAll(ctx, entities any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveAll", reflect.TypeOf((*MockWriteBatchRepository[K, T])(nil).SaveAll), ctx, entities)
}
